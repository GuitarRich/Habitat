// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Habitat.Website.Specflow
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "UI")]
    public partial class CompatibleRenderingsFeature : Xunit.IClassFixture<CompatibleRenderingsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Compatible Renderings.feature"
#line hidden
        
        public CompatibleRenderingsFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Compatible Renderings", "\tAs an editor \r\n\tI want to be able to switch between layouts \r\n\tSo that I have fl" +
                    "exibility in the layout of the pages", ProgrammingLanguage.CSharp, new string[] {
                        "UI"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(CompatibleRenderingsFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Compatible Renderings")]
        [Xunit.TraitAttribute("Description", "Compatible Renderings_UC1_Check compatible renderings in the Person module")]
        [Xunit.TraitAttribute("Category", "NeedImplementation")]
        public virtual void CompatibleRenderings_UC1_CheckCompatibleRenderingsInThePersonModule()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compatible Renderings_UC1_Check compatible renderings in the Person module", new string[] {
                        "NeedImplementation"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("Expirience Editor application is launched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.And("en/Modules/Feature/Person page is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("EmployeeTeaser rendering is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.When("User clicks <Replace with another component> button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.And("Selects EmployeeContactTeaser from <Select a replacement rendering> dialog", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.Then("rendering name changed to EmployeeContactTeaser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
 testRunner.And("contact information is added in the bottom of the rendering", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Compatible Renderings")]
        [Xunit.TraitAttribute("Description", "Compatible Renderings_UC2_Data source was not changed")]
        [Xunit.TraitAttribute("Category", "NeedImplementation")]
        public virtual void CompatibleRenderings_UC2_DataSourceWasNotChanged()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compatible Renderings_UC2_Data source was not changed", new string[] {
                        "NeedImplementation"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("Expirience Editor application is launched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.And("en/Modules/Feature/Accounts page is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("PageSidebarLeft rendering is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.When("User clicks <Replace with another component> button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.And("Selects PageSidebarRight from <Select a replacement rendering> dialog", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.Then("rendering name changed to PageSidebarRight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
 testRunner.And("SecondaryMenu rendering is now on the right side of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Compatible Renderings")]
        [Xunit.TraitAttribute("Description", "Compatible Renderings_UC3_Check that where is no repeated renderings in the list")]
        [Xunit.TraitAttribute("Category", "NeedImplementation")]
        public virtual void CompatibleRenderings_UC3_CheckThatWhereIsNoRepeatedRenderingsInTheList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compatible Renderings_UC3_Check that where is no repeated renderings in the list", new string[] {
                        "NeedImplementation"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("Expirience Editor application is launched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.And("Modules/Feature/Teasers page is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.When("User selects <Inner 2 Column 6-6> rendering", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.And("User clicks <Replace with another component> button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rendering Name"});
            table1.AddRow(new string[] {
                        "Inner 2 Column 4-8"});
            table1.AddRow(new string[] {
                        "Inner 2 Column 8-4"});
            table1.AddRow(new string[] {
                        "Inner 1 Column"});
#line 36
 testRunner.Then("following rendering available on the <Select a replacement rendering> dialog", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CompatibleRenderingsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CompatibleRenderingsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
